shouldSetTextContent(props: Props): boolean {
  return (
    typeof props.children === 'string' ||
    typeof props.children === 'number' ||
    (typeof props.dangerouslySetInnerHTML === 'object' &&
      props.dangerouslySetInnerHTML !== null &&
      typeof props.dangerouslySetInnerHTML.__html === 'string')
  );
},

resetTextContent(domElement: Instance): void {
  domElement.textContent = '';
},

shouldDeprioritizeSubtree(type: string, props: Props): boolean {
  return !!props.hidden;
},

createTextInstance(
  text: string,
  rootContainerInstance: Container,
  hostContext: HostContext,
  internalInstanceHandle: Object,
): TextInstance {
  if (__DEV__) {
    const hostContextDev = ((hostContext: any): HostContextDev);
    validateDOMNesting(null, text, null, hostContextDev.ancestorInfo);
  }
  var textNode: TextInstance = document.createTextNode(text);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
