func TestBulkHash4(t *testing.T) {
	for _, x := range deflateTests {
		y := x.out
		if len(y) < minMatchLength {
			continue
		}
		y = append(y, y...)
		for j := 4; j < len(y); j++ {
			y := y[:j]
			dst := make([]uint32, len(y)-minMatchLength+1)
			for i := range dst {
				dst[i] = uint32(i + 100)
			}
			bulkHash4(y, dst)
			for i, got := range dst {
				want := hash4(y[i:])
				if got != want && got == uint32(i)+100 {
					t.Errorf("Len:%d Index:%d, want 0x%08x but not modified", len(y), i, want)
				} else if got != want {
					t.Errorf("Len:%d Index:%d, got 0x%08x want:0x%08x", len(y), i, got, want)
				}
			}
		}
	}

  func TestDeflate(t *testing.T) {
  	for _, h := range deflateTests {
  		var buf bytes.Buffer
  		w, err := NewWriter(&buf, h.level)
  		if err != nil {
  			t.Errorf("NewWriter: %v", err)
  			continue
  		}
  		w.Write(h.in)
  		w.Close()
  		if !bytes.Equal(buf.Bytes(), h.out) {
  			t.Errorf("Deflate(%d, %x) = \n%#v, want \n%#v", h.level, h.in, buf.Bytes(), h.out)
  		}
  	}
  }
