
class SubArray:

    def __init__(self, arr):
        # we need a list not a string, so do something to change the type
        self.array = arr.split(',')
        print("the input array is:", self.array)

    def solve_sub_array(self):
        rear = [int(self.array[0])]*len(self.array)
        sum_value = [int(self.array[0])]*len(self.array)
        for i in range(1, len(self.array)):
            sum_value[i] = max(int(self.array[i]) + sum_value[i-1], int(self.array[i]))
            rear[i] = max(sum_value[i], rear[i-1])
        return rear[len(self.array)-1]

if __name__ == '__main__':
    whole_array = input("please input some numbers:")
    array = SubArray(whole_array)
    re = array.solve_sub_array()
    print("the results is:", re)


    def knapsack(W, wt, val, n):
        dp = [[0 for i in range(W+1)]for j in range(n+1)]

        for i in range(1,n+1):
            for w in range(1,W+1):
                if(wt[i-1]<=w):
                    dp[i][w] = max(val[i-1]+dp[i-1][w-wt[i-1]],dp[i-1][w])
                else:
                    dp[i][w] = dp[i-1][w]

        return dp[n][w]
