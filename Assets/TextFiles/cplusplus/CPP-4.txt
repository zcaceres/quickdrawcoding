std::list<std::string> *RdKafka::ConfImpl::dump () {

  const char **arrc;
  size_t cnt;
  std::list<std::string> *arr;

  if (rk_conf_)
    arrc = rd_kafka_conf_dump(rk_conf_, &cnt);
  else
    arrc = rd_kafka_topic_conf_dump(rkt_conf_, &cnt);

  arr = new std::list<std::string>();
  for (int i = 0 ; i < static_cast<int>(cnt) ; i++)
    arr->push_back(std::string(arrc[i]));

  rd_kafka_conf_dump_free(arrc, cnt);
  return arr;
}

RdKafka::Conf *RdKafka::Conf::create (ConfType type) {
  ConfImpl *conf = new ConfImpl();

  conf->conf_type_ = type;

  if (type == CONF_GLOBAL)
    conf->rk_conf_ = rd_kafka_conf_new();
  else
    conf->rkt_conf_ = rd_kafka_topic_conf_new();

  return conf;
}
